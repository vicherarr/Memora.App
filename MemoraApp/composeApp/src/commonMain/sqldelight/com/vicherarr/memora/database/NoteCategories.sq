-- NoteCategories.sq - Tabla de relación N:M entre Notes y Categories
-- Permite que una nota tenga múltiples categorías y una categoría tenga múltiples notas

CREATE TABLE note_categories (
    id TEXT NOT NULL PRIMARY KEY,
    note_id TEXT NOT NULL,
    category_id TEXT NOT NULL,
    created_at TEXT NOT NULL,
    
    -- Campos de sincronización inteligente
    sync_status TEXT NOT NULL DEFAULT 'PENDING', -- PENDING, SYNCED, FAILED
    needs_upload INTEGER NOT NULL DEFAULT 1, -- 0 = no, 1 = sí
    local_created_at INTEGER NOT NULL, -- timestamp local para ordenación
    last_sync_attempt INTEGER DEFAULT NULL, -- último intento de sincronización
    remote_id TEXT DEFAULT NULL, -- ID en el servidor remoto
    
    -- Foreign Key constraints con CASCADE DELETE
    FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
    
    -- Constraint: Evitar relaciones duplicadas
    UNIQUE(note_id, category_id)
);

-- Índices para optimización de queries
CREATE INDEX idx_note_categories_note_id ON note_categories(note_id);
CREATE INDEX idx_note_categories_category_id ON note_categories(category_id);
CREATE INDEX idx_note_categories_sync_status ON note_categories(sync_status);
CREATE INDEX idx_note_categories_needs_upload ON note_categories(needs_upload);

-- Queries para NoteCategoriesDao

-- === Relationship Management ===

insertNoteCategory:
INSERT INTO note_categories (
    id, note_id, category_id, created_at,
    sync_status, needs_upload, local_created_at, remote_id
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

deleteNoteCategory:
DELETE FROM note_categories WHERE id = ?;

deleteNoteCategoriesByNoteId:
DELETE FROM note_categories WHERE note_id = ?;

deleteNoteCategoriesByCategoryId:
DELETE FROM note_categories WHERE category_id = ?;

deleteSpecificNoteCategory:
DELETE FROM note_categories WHERE note_id = ? AND category_id = ?;

-- === Queries for Categories by Note ===

getCategoriesByNoteId:
SELECT c.* 
FROM categories c
INNER JOIN note_categories nc ON c.id = nc.category_id
WHERE nc.note_id = ?
ORDER BY c.name ASC;

getCategoriesByNoteIdFlow:
SELECT c.* 
FROM categories c
INNER JOIN note_categories nc ON c.id = nc.category_id
WHERE nc.note_id = ?
ORDER BY c.name ASC;

-- Get all note-category relationships for reactive updates
getAllNoteCategories:
SELECT * FROM note_categories
ORDER BY created_at DESC;

-- === Queries for Notes by Category ===

getNotesByCategory:
SELECT n.* 
FROM notes n
INNER JOIN note_categories nc ON n.id = nc.note_id
WHERE nc.category_id = ?
ORDER BY n.fecha_modificacion DESC;

getNotesByCategoryFlow:
SELECT n.* 
FROM notes n
INNER JOIN note_categories nc ON n.id = nc.note_id
WHERE nc.category_id = ?
ORDER BY n.fecha_modificacion DESC;

-- === Batch Operations ===

-- Obtener todas las relaciones de un usuario (para sync)
getNoteCategoriesByUserId:
SELECT nc.*
FROM note_categories nc
INNER JOIN notes n ON nc.note_id = n.id
WHERE n.usuario_id = ?
ORDER BY nc.created_at ASC;

-- Verificar si existe relación específica
existsNoteCategory:
SELECT COUNT(*) > 0
FROM note_categories 
WHERE note_id = ? AND category_id = ?;

-- === Sync Operations ===

getNoteCategoriesPendingSync:
SELECT nc.*
FROM note_categories nc
INNER JOIN notes n ON nc.note_id = n.id
WHERE n.usuario_id = ? AND (nc.sync_status = 'PENDING' OR nc.needs_upload = 1)
ORDER BY nc.local_created_at ASC;

markNoteCategoryAsSynced:
UPDATE note_categories 
SET sync_status = 'SYNCED', needs_upload = 0, last_sync_attempt = ?
WHERE id = ?;

markNoteCategoryAsFailed:
UPDATE note_categories 
SET sync_status = 'FAILED', last_sync_attempt = ?
WHERE id = ?;

updateNoteCategoryRemoteId:
UPDATE note_categories 
SET remote_id = ?
WHERE id = ?;

-- === Statistics for Sync Metadata ===

getNoteCategoriesCount:
SELECT COUNT(*)
FROM note_categories nc
INNER JOIN notes n ON nc.note_id = n.id
WHERE n.usuario_id = ?;

getNoteCategoriesHashData:
SELECT nc.id, nc.note_id, nc.category_id, nc.created_at
FROM note_categories nc
INNER JOIN notes n ON nc.note_id = n.id
WHERE n.usuario_id = ?
ORDER BY nc.id ASC;

-- === Cleanup Operations ===

-- Encontrar categorías huérfanas (sin notas) para limpieza automática
getOrphanedCategories:
SELECT c.*
FROM categories c
LEFT JOIN note_categories nc ON c.id = nc.category_id
WHERE c.user_id = ? AND nc.category_id IS NULL;

-- Contar notas por categoría
countNotesByCategory:
SELECT 
    c.id,
    c.name,
    COUNT(nc.note_id) AS noteCount
FROM categories c
LEFT JOIN note_categories nc ON c.id = nc.category_id
WHERE c.user_id = ?
GROUP BY c.id, c.name
ORDER BY c.name ASC;